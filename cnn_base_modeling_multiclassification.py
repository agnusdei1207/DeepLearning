# -*- coding: utf-8 -*-
"""CNN Base Modeling_Multiclassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wQ5PMqNUaoxh_59z4mF84ajCJYVwUpvt
"""

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Colab\ Notebooks

import numpy as np

data = np.load("./data/LOL.npz")

X_train, y_train = data["X_train"], data["y_train"]
X_val, y_val = data["X_val"], data["y_val"]

print(X_train.shape)
print(y_train.shape)
print(X_val.shape)
print(y_val.shape)

# 모델링

from tensorflow.keras import Sequential
from tensorflow.keras.layers import InputLayer, Dense, Flatten
from tensorflow.keras.optimizers import Adam

# CNN Layer
from tensorflow.keras.layers import Conv2D, MaxPool2D # Conv: 특징 추출, Maxpol: 필터링

# 모델설계
CNN_model = Sequential()
CNN_model.add(InputLayer(input_shape=(224,224,3))) # 입력층 input_shape : 단 한 개의 데이터 차원에만 맞춰줘도 됨
# 특징 추출부
CNN_model.add(Conv2D(kernel_size=(3,3), # 3*3 픽셀 범위를 변형시켜 가며 특징을 관찰
                     filters=32, # 관찰 돋보기 개수
                     activation = 'relu'))
CNN_model.add(MaxPool2D()) # 필터링

CNN_model.add(Conv2D(kernel_size=(3,3),filters=64, activation = 'relu')) # 항아리 모양
CNN_model.add(MaxPool2D())

CNN_model.add(Conv2D(kernel_size=(3,3),filters=32, activation = 'relu')) 
CNN_model.add(MaxPool2D())

# 분류기
CNN_model.add(Flatten()) # 데이터 평탄화
CNN_model.add(Dense(64,activation='relu'))
CNN_model.add(Dense(128,activation='relu'))
CNN_model.add(Dense(64,activation='relu'))
CNN_model.add(Dense(5,activation='softmax')) # 출력층

# 2. 모델 학습/평가 방법
CNN_model.compile(loss = "sparse_categorical_crossentropy",# 확률 정보로 안 바꾼 상태라면 sparse_categorical_crossentropy
                  optimizer = Adam(),
                  metrics = "accuracy")

# 3. 모델 학습 및 결과 시각화
CNN_h = CNN_model.fit(X_train, y_train,
                      validation_data = (X_val, y_val),
                      epochs = 50)

