# -*- coding: utf-8 -*-
"""dlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yfL9_XW-Gxmff40PBBe36IGAA5zD4pYR
"""

!pip install dlib # 68 of Landmark from face
!pip install imutils
!pip install cmake

import dlib, cv2, imutils
import numpy as np
from imutils import face_utils
import matplotlib.pyplot as plt

# Initialize to extraction face
try:
  detector = dlib.get_frontal_face_detector()
# Create Landmark Instance 
  predictor = dlib.shape_predictor("./model/shape_predictor_68_face_landmarks.dat")
  print("read")
except:
  print("error")

image = cv2.imread("./1.jpg")
imgae = cv2.resize(image,(480,480),interpolation = cv2.INTER_CUBIC)
#image = imutils.resize(image, width=500) height : auto 

color_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
rects = detector(color_image, 1) # Detecting > rectangle

for(i, rect) in enumerate(rects): # enumerate : numbering ~68
  shape = predictor(color_image, rect)
  shape = face_utils.shape_to_np(shape) # change to ndarray type for calculate
  

  (x,y,w,h) = face_utils.rect_to_bb(rect) # divide coordinates 
  cv2.rectangle(color_image, (x,y), (x+w, y+h), (105,0,100), 3) 
  
  # from DB getting Index of person
  cv2.putText(color_image, "Face #{}".format(i+1), (x-10, y-10),
              cv2.FONT_HERSHEY_COMPLEX, 0.5, (105,0,100), 3) # 0.5 font-size
  
  # original Image 
  # pointing Image
  for(x,y) in shape:
    cv2.circle(image,(x,y),3,(0,0,255),-1) # -1 : fully circle
    
    print(f"Count Faces : {i+1} (Left : {rect.left()} Top : {rect.top()} Right : {rect.right} Bottom : {rect.bottom()}")

image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.xticks([])
plt.yticks([])
plt.imshow(image)

